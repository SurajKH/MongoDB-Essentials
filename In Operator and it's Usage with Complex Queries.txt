use ShoppingDetails;


//Single Insertion of a Single Document into ShoppingDetails Collections.
db.ShoppingDetails.insertOne(
    {
    item_id:1,
    item_details:"Details of Item 1",
    stock_availability:"Yes",
    stock_count:200,
    manufacture_date:Date()
  }
)


//Insertions of Multiple Documents into the ShoppingDetails Collections.
db.ShoppingDetails.insertMany([
  {
    item_id:2,
    item_details:"Details of Item 2",
    stock_availability:"Yes",
    stock_count:500,
    manufacture_date:Date()
  },
  {
    item_id:3,
    item_details:"Details of Item 3",
    stock_availability:"No",
    stock_count:2000,
    manufacture_date:Date()
  },
  {
    item_id:4,
    item_details:"Details of Item 4",
    stock_availability:"No",
    stock_count:1260,
    manufacture_date:Date()
  },
   {
    item_id:5,
    item_details:"Details of Item 5",
    stock_availability:"Yes",
    stock_count:1000,
    manufacture_date:Date()
  }]);


//In operator.
//In Operator returns the records which matches the conditions.
//Query:find all the items with item_id as 2 or 3.

db.ShoppingDetails.find({item_id:{$in:[2,3]}});


//we can use in operator in Complex Queries.

//Complex Query 1:to find all the items with item_id as either 2 or 3,
//with stock_availability

db.ShoppingDetails.find({item_id:{$in:[2,3]},stock_availability:{$in:["Yes"]}});



